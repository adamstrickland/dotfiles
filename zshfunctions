fh () {
  eval $( ([ -n "$ZSH_NAME" ] && fc -l 1 || history) | fzf +s --tac | sed 's/ *[0-9]* *//')
}

fo () {
  if [ "$#" -ne 1 ]; then
    echo "Usage: $0 APPLICATION, where APPLICATION is the fully-qualified path to the application directory; e.g. '/Applications/Mail.app'" >&2
    exit 1
  fi
  xattr -d com.apple.quarantine $1
}

jp () {
  jq -r 'paths|join(".")' | sed 's/\.[0-9][0-9]*/[]/g' | sort | uniq
}

os () {
  cd ~/src/$1 && git pull origin --rebase && vi
}

pk () {
  portpid $1 | awk '{print $2}' | xargs kill -TERM
}

pd () {
  lsof -nP -i4TCP:$1 | grep LISTEN
}

sk () {
  psg $1 | grep -v grep | awk '{print $2}' | xargs kill -TERM
}

watch () {
    find . -type f | entr -c -r $@
}

drb () {
  docker run -it --rm --entrypoint "" --platform linux/amd64 $1 bash
}

drbm () {
  drb "416918401081.dkr.ecr.us-east-1.amazonaws.com/moment-technology/$1"
}

watch_go_project () {
	watchman watch $PWD
	watchman -j <<-EOT
	["trigger", "$PWD", {
		"name": "gotest",
		"expression": ["amtch", "**/*.go", "wholename"],
		"command": ["just", "test", "./..."],
		"append_files": false,
		"stdout": ">>watchman.log",
		"stderr": ">>watchman.log"
	}]
	EOT
}

function kcat_b() {
  if [ "$BOOTSTRAP_SERVERS" == "" ]; then
    echo "BOOTSTRAP_SERVERS is not set"
    return
  fi

  kcat -b $BOOTSTRAP_SERVERS "$@"
}

function kcat_fb() {
  if [ "$KCAT_CONFIG" == "" ]; then
    echo "KCAT_CONFIG is not set"
    return
  fi
  kcat_b -F $KCAT_CONFIG "$@"
}

function agls () {
  ag -l $1 | xargs sed -i '.bak' "s/$1/$2/g"
}

function gresetbranch() {
  bn=$(git rev-parse --abbrev-ref HEAD)
  git checkout -b "$bn+bak"
  git checkout main
  git pull origin main
  git branch -D "$bn"
  git checkout -b "$bn"
}
